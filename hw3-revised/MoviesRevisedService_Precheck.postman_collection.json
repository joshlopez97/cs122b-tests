{
	"info": {
		"_postman_id": "adee5d5a-b117-4944-8027-58b3aeb36fa1",
		"name": "MoviesRevisedService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Movie",
			"item": [
				{
					"name": "Search",
					"item": [
						{
							"name": "Title Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aacde18-935a-4054-a8cd-bc4461d3c0ed",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), moviesReturnSchema, false, true)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(210);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"Found movies with search parameters\");",
											"     ",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains correct data\", () => {",
											"        let jsonData = response.json();",
											"        targetItems = JSON.parse(pm.variables.get(\"titleSearchMovieData\"));",
											"        console.log(targetItems);",
											"        pm.expect(jsonData.movies.length).eql(targetItems.length);",
											"    ",
											"        jsonData.movies.sort(dynamicSort(\"movieId\"));",
											"        targetItems.sort(dynamicSort(\"movieId\"));",
											"    ",
											"        for (i = 0; i< targetItems.length; i++){",
											"            pm.expect(jsonData.movies[i].movieId).eql(targetItems[i].movieId);",
											"            pm.expect(jsonData.movies[i].title).eql(targetItems[i].title); ",
											"            pm.expect(jsonData.movies[i].director).eql(targetItems[i].director);",
											"            pm.expect(jsonData.movies[i].year).eql(targetItems[i].year);",
											"            pm.expect(jsonData.movies[i].rating).eql(targetItems[i].rating);",
											"            pm.expect(jsonData.movies[i].numVotes).eql(targetItems[i].numVotes);",
											"                                    ",
											"        }",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7d1093c-c600-486e-b112-c1c45df3a7cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/search?title={{searchTitle}}&genre={{searchGenre}}&limit={{limit}}&offset={{offset}}&orderby={{orderBy}}&direction={{direction}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"search"
									],
									"query": [
										{
											"key": "title",
											"value": "{{searchTitle}}"
										},
										{
											"key": "genre",
											"value": "{{searchGenre}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "orderby",
											"value": "{{orderBy}}"
										},
										{
											"key": "direction",
											"value": "{{direction}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genre Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aacde18-935a-4054-a8cd-bc4461d3c0ed",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), moviesReturnSchema, false, true)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(210);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"Found movies with search parameters\");",
											"     ",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains correct data\", () => {",
											"        let jsonData = response.json();",
											"        targetItems = JSON.parse(pm.variables.get(\"genreSearchMovieData\"));",
											"        console.log(targetItems);",
											"        pm.expect(jsonData.movies.length).eql(targetItems.length);",
											"    ",
											"        jsonData.movies.sort(dynamicSort(\"movieId\"));",
											"        targetItems.sort(dynamicSort(\"movieId\"));",
											"    ",
											"        for (i = 0; i< targetItems.length; i++){",
											"            pm.expect(jsonData.movies[i].movieId).eql(targetItems[i].movieId);",
											"            pm.expect(jsonData.movies[i].title).eql(targetItems[i].title); ",
											"            pm.expect(jsonData.movies[i].director).eql(targetItems[i].director);",
											"            pm.expect(jsonData.movies[i].year).eql(targetItems[i].year);",
											"            pm.expect(jsonData.movies[i].rating).eql(targetItems[i].rating);",
											"            pm.expect(jsonData.movies[i].numVotes).eql(targetItems[i].numVotes);",
											"                                    ",
											"        }",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7d1093c-c600-486e-b112-c1c45df3a7cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/search?genre={{searchGenre}}&limit={{limit2}}&offset={{offset2}}&orderby={{orderBy2}}&direction={{direction2}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"search"
									],
									"query": [
										{
											"key": "genre",
											"value": "{{searchGenre}}"
										},
										{
											"key": "limit",
											"value": "{{limit2}}"
										},
										{
											"key": "offset",
											"value": "{{offset2}}"
										},
										{
											"key": "orderby",
											"value": "{{orderBy2}}"
										},
										{
											"key": "direction",
											"value": "{{direction2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No Found Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aacde18-935a-4054-a8cd-bc4461d3c0ed",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(211);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"No movies found with search parameters\");",
											"     ",
											"    });",
											"    ",
											"    ",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "email",
										"value": "{{email}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/search?title={{noFoundSearchTitle}}&genre={{searchGenre}}&limit={{limit}}&offset={{offset}}&orderby={{orderBy}}&direction={{direction}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"search"
									],
									"query": [
										{
											"key": "title",
											"value": "{{noFoundSearchTitle}}"
										},
										{
											"key": "genre",
											"value": "{{searchGenre}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "orderby",
											"value": "{{orderBy}}"
										},
										{
											"key": "direction",
											"value": "{{direction}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30a9f9f6-9bee-4d3e-b776-fb0fef8c3115",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cba8fe2-7110-43c7-8fd9-f479b55028e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add",
					"item": [
						{
							"name": "User has insufficient privilege (Case 141)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7669b9d-5e70-48c3-b16c-d1f00ea64735",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"pm.test('[Report Request] Response matches the required schema', () => {",
											"    pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"});",
											"",
											"pm.test(\"[Report Request] Response contains an error message\", () => {",
											"    let jsonData = response.json();",
											"    pm.expect(jsonData.resultCode).eql(141);",
											"",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"User has insufficient privilege\");",
											"     ",
											"});",
											"",
											"pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"    pm.expect(response.responseTime).to.be.below(500);",
											"});",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7589586-6ecc-4b9d-8c39-819c1c2c3b56",
										"exec": [
											"pm.variables.set(\"addMovieTitle\", JSON.stringify(randomString(10)));",
											"pm.variables.set(\"addMovieDirector\", JSON.stringify(randomString(10)));",
											"pm.variables.set(\"addMovieYear\", randomInt(2020, 2024));",
											"pm.variables.set(\"addMovieBudget\", JSON.stringify(randomDigit(8)));",
											"pm.variables.set(\"addMovieRevenue\", JSON.stringify(randomDigit(8)));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": {{addMovieTitle}},\n    \"director\":{{addMovieDirector}},\n    \"year\": {{addMovieYear}},\n    \"budget\": {{addMovieBudget}},\n    \"revenue\": {{addMovieRevenue}},\n    \"genres\": {{addMovieGenres}}\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/add",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie added successfully  (Case 214)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b32a3601-843f-4b07-93cd-8b84a7c8ce3e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f090730-8c49-452c-a7cb-220256a35115",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"adminSessionID\");",
											"pm.variables.set(\"adminSessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), movieAddReturnSchema, false, true)).to.be.true;",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(214);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"Movie successfully added\");",
											"         ",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response contains correct data\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.movieid).to.contain(\"cs00\");",
											"        pm.variables.set(\"movieId\", jsonData.movieid);",
											"        console.log(jsonData.movieid)",
											"        pm.expect(jsonData.genreid).to.eql(JSON.parse(pm.variables.get(\"addGenreArray\")));",
											"        ",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "email",
										"value": "{{adminEmail}}",
										"type": "text"
									},
									{
										"key": "sessionID",
										"value": "{{adminSessionID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": {{addMovieTitle}},\n    \"director\":{{addMovieDirector}},\n    \"year\": {{addMovieYear}},\n    \"budget\": {{addMovieBudget}},\n    \"revenue\": {{addMovieRevenue}},\n    \"genres\": {{addMovieGenres}}\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/add",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie added successfully with new genre (Case 214)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b32a3601-843f-4b07-93cd-8b84a7c8ce3e",
										"exec": [
											"pm.variables.set(\"addMovieTitle\", JSON.stringify(randomString(10)));",
											"pm.variables.set(\"addMovieDirector\", JSON.stringify(randomString(10)));",
											"pm.variables.set(\"addMovieYear\", JSON.stringify(randomInt(2020, 2024).toString()));",
											"pm.variables.set(\"addMovieBudget\", JSON.stringify(randomDigit(8)));",
											"pm.variables.set(\"addMovieRevenue\", JSON.stringify(randomDigit(8)));",
											"pm.variables.set(\"addMovieGenres2\", JSON.stringify( [{\"name\": \"newGenre\"}, {'id': 1, \"name\": \"action\"}, {'id':19,\"name\": \"Sci-Fi\"}]));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f090730-8c49-452c-a7cb-220256a35115",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"adminSessionID\");",
											"pm.variables.set(\"adminSessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), movieAddReturnSchema, false, true)).to.be.true;",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(214);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"Movie successfully added\");",
											"         ",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains correct data\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.movieid).to.contain(\"cs00\");",
											"        pm.expect(jsonData.genreid.sort()[jsonData.genreid.length-1]).above(23);",
											"        ",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "email",
										"type": "text",
										"value": "{{adminEmail}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{adminSessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": {{addMovieTitle}},\n    \"director\":{{addMovieDirector}},\n    \"year\": {{addMovieYear}},\n    \"budget\": {{addMovieBudget}},\n    \"revenue\": {{addMovieRevenue}},\n    \"genres\": {{addMovieGenres2}}\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/add",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie already exists (Case 216)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0be17894-c109-4505-8e1e-39388ce362a1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "19bff932-c632-43ce-b0d5-bebe4b2e880c",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"adminSessionID\");",
											"pm.variables.set(\"adminSessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"pm.test('[Report Request] Response matches the required schema', () => {",
											"    pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"});",
											"",
											"pm.test(\"[Report Request] Response contains an error message\", () => {",
											"    let jsonData = response.json();",
											"    pm.expect(jsonData.resultCode).eql(216);",
											"",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Movie already exists\");",
											"     ",
											"});",
											"",
											"pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"    pm.expect(response.responseTime).to.be.below(500);",
											"});",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "email",
										"value": "{{adminEmail}}",
										"type": "text"
									},
									{
										"key": "sessionID",
										"value": "{{adminSessionID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": {{addMovieTitle}},\n    \"director\":{{addMovieDirector}},\n    \"year\": {{addMovieYear}},\n    \"budget\": {{addMovieBudget}},\n    \"revenue\": {{addMovieRevenue}},\n    \"genres\": {{addMovieGenres}}\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/add",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve",
					"item": [
						{
							"name": "Found movies with search parameters (Case 210)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e263167-18cc-4c96-8e44-dd81348ed8e7",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), movieReturnSchema, false, true)).to.be.true;",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(210);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"Found movies with search parameters\");",
											"         ",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response contains correct data\", () => {",
											"        let jsonData = response.json();",
											"        let targetData = JSON.parse(pm.variables.get(\"addMovieGenres2\"));",
											"        ",
											"        jsonData.genres.sort(dynamicSort(\"id\"));",
											"        pm.expect(jsonData.title).to.eql(pm.variables.get(\"addMovieTitle\"));",
											"        pm.expect(jsonData.director).to.eql(pm.variables.get(\"addMovieDirector\"));",
											"        pm.expect(jsonData.year).to.eql(pm.variables.get(\"addMovieYear\"));",
											"        pm.expect(jsonData.budget).to.eql(pm.variables.get(\"addMovieBudget\"));",
											"        pm.expect(jsonData.revenue).to.eql(pm.variables.get(\"addMovieRevenue\"));",
											"        ",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/get/{{movieId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"get",
										"{{movieId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No movies found with search parameters (Case 211)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e263167-18cc-4c96-8e44-dd81348ed8e7",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains a success message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(211);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"No movies found with search parameters\");",
											"         ",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/get/nonExisitingMovieId",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"get",
										"nonExisitingMovieId"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "User has insufficient privilege (Case 141)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7669b9d-5e70-48c3-b16c-d1f00ea64735",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains an error message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(141);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"User has insufficient privilege\");",
											"         ",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8989a54-afd0-4edb-bcd1-aed549cf3b1e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/delete/{{movieId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"delete",
										"{{movieId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie successfully removed (Case 240)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e263167-18cc-4c96-8e44-dd81348ed8e7",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"adminSessionID\");",
											"pm.variables.set(\"adminSessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"pm.test('[Report Request] Response matches the required schema', () => {",
											"    pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"});",
											"",
											"pm.test(\"[Report Request] Response contains a success message\", () => {",
											"    let jsonData = response.json();",
											"    pm.expect(jsonData.resultCode).eql(240);",
											"",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Movie successfully removed\");",
											"     ",
											"});",
											"",
											"pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"    pm.expect(response.responseTime).to.be.below(500);",
											"});",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{adminEmail}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{adminSessionID}}"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/delete/{{movieId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"delete",
										"{{movieId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie has been already removed (Case 242)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb10b6a8-3d07-4f15-9c55-6f6dc849f239",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"adminSessionID\");",
											"pm.variables.set(\"adminSessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"pm.test('[Report Request] Response matches the required schema', () => {",
											"    pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"});",
											"",
											"pm.test(\"[Report Request] Response contains an error message\", () => {",
											"    let jsonData = response.json();",
											"    pm.expect(jsonData.resultCode).eql(242);",
											"",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Movie has been already removed\");",
											"     ",
											"});",
											"",
											"pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"    pm.expect(response.responseTime).to.be.below(500);",
											"});",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{adminEmail}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{adminSessionID}}"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/delete/{{movieId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"delete",
										"{{movieId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Could not remove movie (Case 241)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb10b6a8-3d07-4f15-9c55-6f6dc849f239",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"adminSessionID\");",
											"pm.variables.set(\"adminSessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"pm.test('[Report Request] Response matches the required schema', () => {",
											"    pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"});",
											"",
											"pm.test(\"[Report Request] Response contains an error message\", () => {",
											"    let jsonData = response.json();",
											"    pm.expect(jsonData.resultCode).eql(241);",
											"",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Could not remove movie\");",
											"     ",
											"});",
											"",
											"pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"    pm.expect(response.responseTime).to.be.below(500);",
											"});",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "email",
										"type": "text",
										"value": "{{adminEmail}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{adminSessionID}}"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/delete/nonExisitingMovieId",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"delete",
										"nonExisitingMovieId"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Hidden Retrieve",
					"item": [
						{
							"name": "User has insufficient privilege (Case 141)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7669b9d-5e70-48c3-b16c-d1f00ea64735",
										"exec": [
											"pm.test(\"[Initial Request] Status code is 204\", function () {",
											"    pm.expect(pm.response.code).eql(204);",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a transactionID\", function () {",
											"    pm.response.to.have.header(\"transactionID\");",
											"});",
											"",
											"pm.test(\"[Initial Request] Response contains a sessionID\", function () {",
											"    pm.response.to.have.header(\"sessionID\");",
											"});",
											"",
											"let transactionId = pm.response.headers.get(\"transactionID\");",
											"pm.variables.unset(\"sessionID\");",
											"pm.variables.set(\"sessionID\", pm.response.headers.get(\"sessionID\"));",
											"",
											"pm.test(\"[Initial Request] Response body should be empty\", function () {",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"[Initial Request] Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"endPointTests = (response) => {",
											"    pm.test(\"[Report Request] Status code is 200\", function () {",
											"        pm.expect(response.code).eql(200);",
											"    });",
											"",
											"    pm.test(\"[Report Request] Response has a body in json format\", function () {",
											"        pm.expect(response.json()).not.eql(null);",
											"    });",
											"",
											"    pm.test('[Report Request] Response matches the required schema', () => {",
											"        pm.expect(tv4.validate(response.json(), standardReturnSchema, false, true)).to.be.true;",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response contains an error message\", () => {",
											"        let jsonData = response.json();",
											"        pm.expect(jsonData.resultCode).eql(141);",
											"    ",
											"        pm.expect(jsonData.message).not.eql(null);",
											"        pm.expect(jsonData.message).to.contain(\"User has insufficient privilege\");",
											"         ",
											"    });",
											"    ",
											"    pm.test(\"[Report Request] Response time is less than 500ms\", function () {",
											"        pm.expect(response.responseTime).to.be.below(500);",
											"    });",
											"}",
											"",
											"(report = (n) => {",
											"    if (n < 0) return endPointTests(null);",
											"    else  setTimeout(()=>{",
											"        pm.sendRequest(requestBuilder(\"/api/g/report\", \"GET\", transactionId, pm.variables.get(\"email\"), pm.variables.get(\"sessionID\"),{}), (err, res) => {",
											"                if (res.code == 204) report(n-1);",
											"                else endPointTests(res)",
											"        });",
											"    }, 500)",
											"})(numOfPulls);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8989a54-afd0-4edb-bcd1-aed549cf3b1e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "email",
										"type": "text",
										"value": "{{email}}"
									},
									{
										"key": "sessionID",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/g/movies/get/{{movieId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"g",
										"movies",
										"get",
										"{{movieId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8926adca-3e70-4b29-bcad-54d903d1cc60",
				"type": "text/javascript",
				"exec": [
					"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
					"",
					"randomInt = (start, end) => _.random(start, end);",
					"randomString = (len) => {",
					"    let string = \"\";",
					"    for (var i = 0; i < len; i++)",
					"        string += possible.charAt(randomInt(0, 61));",
					"    return string;",
					"};",
					"randomDigit = (len) => {",
					"    let string = \"\";",
					"    for (var i = 0; i < len; i++)",
					"        string += possible.charAt(randomInt(52, 61));",
					"    return string;",
					"};",
					"",
					"dynamicSort = (property) => {",
					"    let sortOrder = 1;",
					"    if(property[0] === \"-\") {",
					"        sortOrder = -1;",
					"        property = property.substr(1);",
					"    }",
					"    return (a,b) =>{",
					"        return ((a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0) * sortOrder;",
					"    }",
					"};",
					"",
					"",
					"host = ()=> pm.variables.get(\"host\");",
					"port = ()=> pm.variables.get(\"port\");",
					"requestBuilder = (api, method, transactionId, email, sessionId, payload) => {",
					"return {",
					"           url:  \"http://\"+host()+\":\"+port() + api, ",
					"           method,",
					"            header :{",
					"            'Accept': 'application/json',",
					"            'Content-Type': 'application/json',",
					"            'transactionID': transactionId,",
					"            'email':email,",
					"            'sessionID':sessionId",
					"            },",
					"           body: {",
					"               mode :\"raw\",",
					"               raw: JSON.stringify(payload)",
					"           },",
					"           timeout: 500",
					"       };",
					"};",
					"",
					"",
					"standardReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        }",
					"    }",
					"};",
					"",
					"loginReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"sessionID\": {",
					"            \"type\": \"string\"",
					"        }",
					"    }",
					"};",
					"",
					"movieReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"movie\": {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"movieId\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"title\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"director\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"year\" : {",
					"                    \"type\" : \"number\"",
					"                },",
					"                \"backdrop_path\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"overview\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"poster_path\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"revenue\" : {",
					"                    \"type\" : \"number\"",
					"                },",
					"                \"rating\" : {",
					"                    \"type\" : \"number\"",
					"                },",
					"                \"numVotes\" : {",
					"                    \"type\" : \"number\"",
					"                },",
					"                \"genres\" : {",
					"                    \"type\" : \"array\",",
					"                    \"items\": {",
					"                        \"type\": \"object\",",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"name\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    }",
					"                },",
					"                \"stars\": {",
					"                    \"type\" : \"array\",",
					"                    \"items\": {",
					"                        \"type\": \"object\",",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"name\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"birthYear\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"moviesReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"movies\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"properties\": {",
					"                    \"movieId\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"title\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"year\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"                    \"director\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"rating\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"                    \"numVotes\": {",
					"                        \"type\": \"number\"",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"movieAddReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"movieid\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"genreid\" : {",
					"            \"type\" : \"array\",",
					"            \"items\": {",
					"                \"type\": \"number\"",
					"            }",
					"            ",
					"        },",
					"    }",
					"};",
					"",
					"cartReturnSchema =  {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"items\" : {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\" : \"object\",",
					"                \"properties\" : {",
					"                    \"email\" : {",
					"                        \"type\" :\"string\"",
					"                    },",
					"                    \"movieId\":{",
					"                        \"type\" : \"string\"",
					"                    },",
					"                    \"quantity\" : {",
					"                        \"type\" : \"number\"",
					"                    }",
					"                    ",
					"                }",
					"                ",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"creditcardReturnSchema =  {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"creditcard\" : {",
					"            \"type\" : \"object\",",
					"            \"properties\" : {",
					"                \"id\" : {",
					"                    \"type\" :\"string\"",
					"                },",
					"                \"firstName\":{",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"lastName\":{",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"expiration\" : {",
					"                    \"type\" : \"string\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"customerReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"customer\" : {",
					"            \"type\" : \"object\",",
					"            \"properties\" : {",
					"                \"email\" : {",
					"                    \"type\" :\"string\"",
					"                },",
					"                \"firstName\":{",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"lastName\":{",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"ccId\" : {",
					"                    \"type\" : \"string\"",
					"                },",
					"                \"address\" : {",
					"                    \"type\" : \"string\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"orderReturnSchema = {",
					"    \"type\" : \"object\",",
					"    \"properties\" : {",
					"        \"resultCode\" : {",
					"            \"type\" : \"number\"",
					"        },",
					"        \"message\" : {",
					"            \"type\" : \"string\"",
					"        },",
					"        \"redirectURL\": {",
					"            \"type\" : \"string\"",
					"        },",
					"",
					"        \"token\":{",
					"            \"type\" : \"string\"",
					"        }",
					"    }",
					"};",
					"numOfPulls = 6"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "813436d4-51c1-4db6-855a-b92ef20dafdb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}